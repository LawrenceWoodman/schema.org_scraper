#!/usr/bin/env ruby
# Encoding: utf-8
## schema.org_scraper: Scrapes the schema.org site
##
## Usage: schema.org_scraper [options...]
##
## Returns the vocabularies and datatypes from the schema.org site
## in either JSON or YAML
##

require 'json'
require 'nokogiri'
require 'open-uri'
require 'optparse'
require 'yaml'

# The page with the full list of all the types
TYPES_LIST_URL = 'http://schema.org/docs/full.html'

# Displays comment at top of file
def banner
  File.readlines(__FILE__).
  grep(/^##.*/).
  map { |line| line.chomp[3..-1] }.
  join("\n")+"\n"+"  Options:\n"
end

options = {output_format: :json, types: :vocabularies}
ARGV.options do |option|
  option.banner = banner
  option.on('-j','--json', 'Output the schemas in JSON (Default)') do
    options[:output_format] = :json
  end
  option.on('-y','--yaml', 'Output the schemas in YAML') do
    options[:output_format] = :yaml
  end
  option.on('-v','--vocabularies', 'Output the Vocabularies (Default)') do
    options[:types] = :vocabulaires
  end
  option.on('-d','--datatypes', 'Output the DataTypes') do
    options[:types] = :datatypes
  end
  option.on_tail('-h','--help', 'This help message') {puts option; exit}

  begin
    option.parse!
  rescue OptionParser::InvalidOption => error
    puts "#{error.to_s.capitalize}\n#{option}"; exit
  end

end

class Type
  include Comparable

  def initialize(html)
    @doc	= Nokogiri::HTML(html)
  end

  def name
    ancestors.last
  end

  def description
    return @description if @description
    element = @doc.css("div#mainContent h1.page-title").first.next

    # Work out where the description stops
    while !(['div', 'table', 'h3'].include?(element.name.downcase))
      (@description ||= '') << element.inner_text
      element = element.next
    end
    @description = unicode2ascii(@description)
  end

  def ancestors
    return @ancestors if @ancestors
    @ancestors = @doc.css("div#mainContent h1.page-title a").collect do |a|
      a.inner_text  
    end
  end

  def vocabularies
    return @vocabularies if @vocabularies
    @vocabularies = @doc.css("thead.supertype th.supertype-name a").collect do |a|
      a.inner_text  
    end
  end

  def properties
    return @properties if @properties
    prop_thead = @doc.css("tbody.supertype").last
    if prop_thead
      @properties = prop_thead.css("tr").collect do |prop|
        name = prop.css("th.prop-nam").inner_text
        types = prop.css("td.prop-ect").inner_text
        description = unicode2ascii(prop.css("td.prop-desc").inner_text)
        {'name' => name, 'types' => types, 'description' => description}
      end
    end
    @properties ||= []
  end

  def instances
    return @instances if @instances
    ul_header = @doc.css("div#main h3").last
    if ul_header
      if ul_header.inner_text =~ /Instances of/i
        ul = @doc.css("div#main ul").last
        @instances = ul.css("li a").collect {|a| a.inner_text }
      end
    end
    @instances ||= []
  end

  def datatype?
    ancestors.include?('DataType')
  end

  def vocabulary?
    !datatype?
  end

  def to_h
    hash = {
      'name' => name,
      'description' => description,
      'ancestors' => ancestors,
    }

    hash['vocabularies'] = vocabularies if vocabularies.any?
    hash['properties'] = properties if properties.any?
    hash['instances'] = instances if instances.any?
    hash
  end

  def <=>(other)
    name <=> other.name
  end

  private
  def unicode2ascii(text)
    text.gsub(/\xE2\x80\x94/, ' - ')
  end

end

# Raises URI::Error if can't create url
def make_absolute_url(page_url, url)
  return url unless URI.parse(url).relative?
  URI.parse(page_url).merge(url).to_s
end

def get_type_links(html)
  doc	= Nokogiri::HTML(html)
  doc.css("div#mainContent a[name]").collect do |a|
    href = a.next.attribute('href').value
    make_absolute_url(TYPES_LIST_URL, href)
  end
end

def get_types(links)
  links.collect do |link|
    html = open(link)
    Type.new(html)
  end
end

type_links = get_type_links(open(TYPES_LIST_URL))
types = get_types(type_links).sort

types = if options[:types] == :datatypes
  types.find_all {|type| type.datatype?}
else
  types.find_all {|type| type.vocabulary?}
end

output = types.collect {|type| type.to_h}
if options[:output_format] == :json
  puts output.to_json
else
  puts output.to_yaml
end
